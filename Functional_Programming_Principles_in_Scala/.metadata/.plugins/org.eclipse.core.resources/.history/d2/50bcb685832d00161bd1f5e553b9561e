package recfun

object sample {
  
  var num: Int = 0
  var right: Int = 0
  var chars = "(a".toList
/**
	def balance(chars: List[Char]): Boolean = {
	  
	  var num: Int = 0
	  var right: Int = 0
	  
	  if (chars.isEmpty)
	      throw new java.util.NoSuchElementException()
	  
	  def update(chars: List[Char], num: Int): Int = {
	    if (chars.tail.isEmpty)
	      if (chars.head == '(') num + 1
	      else if (chars.head == ')')
	        if (num > 0) num - 1
	        else right = right + 1
	    else
	      if (chars.head == '(') num + 1
	      else if (chars.head == ')')
	        if (num > 0) num - 1
	        else right + 1
	        
	      update(chars.tail, num)
	  }
	  
	  update(chars)
	  
	  if (num == 0 && right == 0) true
	  else false
	}
*/

  def balance(chars: List[Char]): Boolean = {
    def f(chars: List[Char], numOpens: Int): Boolean = {
      if (chars.isEmpty) {
        numOpens == 0
      } else {
        val h = chars.head
        val n =
          if (h == '(') numOpens + 1
          else if (h == ')') numOpens - 1
          else numOpens
        if (n >= 0) f(chars.tail, n)
        else false
      }
    }

    f(chars, 0)
  }
  
  balance(a)
}