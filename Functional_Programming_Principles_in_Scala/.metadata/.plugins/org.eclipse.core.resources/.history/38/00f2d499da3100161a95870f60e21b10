package week2

object rationals {

  val x = new Rational(1, 3)
  val y = new Rational(5, 7)
  val z = new Rational(3, 2)
  
  x.numer
  x.denom
  y.add(y)
  x.sub(y).sub(z)
  x < y
  x max y
  
  new Rational(2)
  new Rational(4, 5)
  
  new Rational(1045540, 5232500)
  
}

class Rational(x: Int, y: Int) {

  require(y != 0, "denominator must be nonzero")
  
  def this(x: Int) = this(x, 1)
  
  private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
  private val g = gcd(x, y)
  
  def numer = x
  def denom = y
  
  def +(that: Rational) =
    new Rational(
      numer * that.denom + that.numer * denom, denom * that.denom)
      
  def neg: Rational = new Rational(-this.numer, this.denom)
  
  def -(that: Rational) = this + that.neg
  
  def <(that: Rational) = this.numer * that.denom < that.numer * this.denom
  
  def max(that: Rational) = if (this < that) that else this
  
      
  override def toString = numer / g + "/" + denom / g
  
}